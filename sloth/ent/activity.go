// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"sloth/ent/activity"
	"sloth/ent/user"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Activity is the model entity for the Activity schema.
type Activity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartedAt holds the value of the "startedAt" field.
	StartedAt time.Time `json:"startedAt,omitempty"`
	// EndedAt holds the value of the "endedAt" field.
	EndedAt time.Time `json:"endedAt,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivityQuery when eager-loading is set.
	Edges      ActivityEdges `json:"edges"`
	user_owner *int
}

// ActivityEdges holds the relations/edges for other nodes in the graph.
type ActivityEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivityEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activity) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // startedAt
		&sql.NullTime{},   // endedAt
		&sql.NullString{}, // description
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Activity) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_owner
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activity fields.
func (a *Activity) assignValues(values ...interface{}) error {
	if m, n := len(values), len(activity.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field startedAt", values[0])
	} else if value.Valid {
		a.StartedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field endedAt", values[1])
	} else if value.Valid {
		a.EndedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[2])
	} else if value.Valid {
		a.Description = value.String
	}
	values = values[3:]
	if len(values) == len(activity.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_owner", value)
		} else if value.Valid {
			a.user_owner = new(int)
			*a.user_owner = int(value.Int64)
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Activity.
func (a *Activity) QueryOwner() *UserQuery {
	return (&ActivityClient{config: a.config}).QueryOwner(a)
}

// Update returns a builder for updating this Activity.
// Note that, you need to call Activity.Unwrap() before calling this method, if this Activity
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activity) Update() *ActivityUpdateOne {
	return (&ActivityClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Activity) Unwrap() *Activity {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activity is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activity) String() string {
	var builder strings.Builder
	builder.WriteString("Activity(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", startedAt=")
	builder.WriteString(a.StartedAt.Format(time.ANSIC))
	builder.WriteString(", endedAt=")
	builder.WriteString(a.EndedAt.Format(time.ANSIC))
	builder.WriteString(", description=")
	builder.WriteString(a.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Activities is a parsable slice of Activity.
type Activities []*Activity

func (a Activities) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
