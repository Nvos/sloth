// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sloth/ent/activity"
	"sloth/ent/user"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
}

// SetStartedAt sets the startedAt field.
func (ac *ActivityCreate) SetStartedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetStartedAt(t)
	return ac
}

// SetEndedAt sets the endedAt field.
func (ac *ActivityCreate) SetEndedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetEndedAt(t)
	return ac
}

// SetDescription sets the description field.
func (ac *ActivityCreate) SetDescription(s string) *ActivityCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the description field if the given value is not nil.
func (ac *ActivityCreate) SetNillableDescription(s *string) *ActivityCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetOwnerID sets the owner edge to User by id.
func (ac *ActivityCreate) SetOwnerID(id int) *ActivityCreate {
	ac.mutation.SetOwnerID(id)
	return ac
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (ac *ActivityCreate) SetNillableOwnerID(id *int) *ActivityCreate {
	if id != nil {
		ac = ac.SetOwnerID(*id)
	}
	return ac
}

// SetOwner sets the owner edge to User.
func (ac *ActivityCreate) SetOwner(u *User) *ActivityCreate {
	return ac.SetOwnerID(u.ID)
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	if _, ok := ac.mutation.StartedAt(); !ok {
		return nil, errors.New("ent: missing required field \"startedAt\"")
	}
	if _, ok := ac.mutation.EndedAt(); !ok {
		return nil, errors.New("ent: missing required field \"endedAt\"")
	}
	var (
		err  error
		node *Activity
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	var (
		a     = &Activity{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldStartedAt,
		})
		a.StartedAt = value
	}
	if value, ok := ac.mutation.EndedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldEndedAt,
		})
		a.EndedAt = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldDescription,
		})
		a.Description = value
	}
	if nodes := ac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.OwnerTable,
			Columns: []string{activity.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}
